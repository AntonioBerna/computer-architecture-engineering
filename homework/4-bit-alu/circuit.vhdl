-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

LIBRARY ieee;
USE ieee.std_logic_1164.all;
use IEEE.NUMERIC_STD.ALL;

entity DIG_ROM_ALU_1 is
  port (
    D: out std_logic_vector (1 downto 0);
    A: in std_logic_vector (5 downto 0);
    sel: in std_logic );
end DIG_ROM_ALU_1;

architecture Behavioral of DIG_ROM_ALU_1 is
  type mem is array ( 0 to 57) of std_logic_vector (1 downto 0);
  constant my_Rom : mem := (
    "00", "10", "10", "01", "00", "00", "01", "01", "00", "00", "00", "10", 
    "00", "00", "00", "00", "00", "10", "10", "10", "00", "00", "00", "00", 
    "00", "10", "10", "00", "00", "00", "00", "00", "10", "00", "00", "10", 
    "00", "00", "00", "00", "10", "10", "10", "00", "00", "00", "00", "00", 
    "10", "00", "00", "00", "00", "00", "00", "00", "10", "10");
begin
  process (A, sel)
  begin
    if sel='0' then
      D <= (others => 'Z');
    elsif A > "111001" then
      D <= (others => '0');
    else
      D <= my_rom(to_integer(unsigned(A)));
    end if;
  end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
use IEEE.NUMERIC_STD.ALL;

entity DIG_ROM_ALU_2 is
  port (
    D: out std_logic_vector (1 downto 0);
    A: in std_logic_vector (6 downto 0);
    sel: in std_logic );
end DIG_ROM_ALU_2;

architecture Behavioral of DIG_ROM_ALU_2 is
  type mem is array ( 0 to 121) of std_logic_vector (1 downto 0);
  constant my_Rom : mem := (
    "00", "10", "10", "01", "00", "00", "01", "01", "00", "00", "00", "10", 
    "00", "00", "00", "00", "00", "10", "10", "10", "00", "00", "00", "00", 
    "00", "10", "10", "00", "00", "00", "00", "00", "10", "00", "00", "10", 
    "00", "00", "00", "00", "10", "10", "10", "00", "00", "00", "00", "00", 
    "10", "00", "00", "00", "00", "00", "00", "00", "10", "10", "00", "00", 
    "00", "00", "00", "00", "10", "01", "01", "11", "10", "10", "11", "11", 
    "00", "00", "00", "10", "00", "00", "00", "00", "00", "10", "10", "10", 
    "00", "00", "00", "00", "00", "10", "10", "00", "00", "00", "00", "00", 
    "10", "00", "00", "10", "00", "00", "00", "00", "10", "10", "10", "00", 
    "00", "00", "00", "00", "10", "00", "00", "00", "00", "00", "00", "00", 
    "10", "10");
begin
  process (A, sel)
  begin
    if sel='0' then
      D <= (others => 'Z');
    elsif A > "1111001" then
      D <= (others => '0');
    else
      D <= my_rom(to_integer(unsigned(A)));
    end if;
  end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
use IEEE.NUMERIC_STD.ALL;

entity DIG_ROM_ALU_3 is
  port (
    D: out std_logic_vector (1 downto 0);
    A: in std_logic_vector (6 downto 0);
    sel: in std_logic );
end DIG_ROM_ALU_3;

architecture Behavioral of DIG_ROM_ALU_3 is
  type mem is array ( 0 to 121) of std_logic_vector (1 downto 0);
  constant my_Rom : mem := (
    "00", "10", "10", "01", "00", "00", "01", "01", "00", "00", "00", "10", 
    "00", "00", "00", "00", "00", "10", "10", "10", "00", "00", "00", "00", 
    "00", "10", "10", "00", "00", "00", "00", "00", "10", "00", "00", "10", 
    "00", "00", "00", "00", "10", "10", "10", "00", "00", "00", "00", "00", 
    "10", "00", "00", "00", "00", "00", "00", "00", "10", "10", "00", "00", 
    "00", "00", "00", "00", "10", "01", "01", "11", "10", "10", "11", "11", 
    "00", "00", "00", "10", "00", "00", "00", "00", "00", "10", "10", "10", 
    "00", "00", "00", "00", "00", "10", "10", "00", "00", "00", "00", "00", 
    "10", "00", "00", "10", "00", "00", "00", "00", "10", "10", "10", "00", 
    "00", "00", "00", "00", "10", "00", "00", "00", "00", "00", "00", "00", 
    "10", "10");
begin
  process (A, sel)
  begin
    if sel='0' then
      D <= (others => 'Z');
    elsif A > "1111001" then
      D <= (others => '0');
    else
      D <= my_rom(to_integer(unsigned(A)));
    end if;
  end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
use IEEE.NUMERIC_STD.ALL;

entity DIG_ROM_ALU_4 is
  port (
    D: out std_logic_vector (1 downto 0);
    A: in std_logic_vector (6 downto 0);
    sel: in std_logic );
end DIG_ROM_ALU_4;

architecture Behavioral of DIG_ROM_ALU_4 is
  type mem is array ( 0 to 121) of std_logic_vector (1 downto 0);
  constant my_Rom : mem := (
    "00", "10", "10", "01", "00", "00", "01", "01", "00", "00", "00", "10", 
    "00", "00", "00", "00", "00", "10", "10", "10", "00", "00", "00", "00", 
    "00", "10", "10", "00", "00", "00", "00", "00", "10", "00", "00", "10", 
    "00", "00", "00", "00", "10", "10", "10", "00", "00", "00", "00", "00", 
    "10", "00", "00", "00", "00", "00", "00", "00", "10", "10", "00", "00", 
    "00", "00", "00", "00", "10", "01", "01", "11", "10", "10", "11", "11", 
    "00", "00", "00", "10", "00", "00", "00", "00", "00", "10", "10", "10", 
    "00", "00", "00", "00", "00", "10", "10", "00", "00", "00", "00", "00", 
    "10", "00", "00", "10", "00", "00", "00", "00", "10", "10", "10", "00", 
    "00", "00", "00", "00", "10", "00", "00", "00", "00", "00", "00", "00", 
    "10", "10");
begin
  process (A, sel)
  begin
    if sel='0' then
      D <= (others => 'Z');
    elsif A > "1111001" then
      D <= (others => '0');
    else
      D <= my_rom(to_integer(unsigned(A)));
    end if;
  end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity main is
  port (
    b_0: in std_logic;
    a_0: in std_logic;
    b_1: in std_logic;
    a_1: in std_logic;
    b_2: in std_logic;
    a_2: in std_logic;
    b_3: in std_logic;
    a_3: in std_logic;
    op_1: in std_logic;
    op_2: in std_logic;
    op_3: in std_logic;
    op_0: in std_logic;
    r_0: out std_logic;
    r_1: out std_logic;
    r_2: out std_logic;
    r_3: out std_logic;
    c_out: out std_logic);
end main;

architecture Behavioral of main is
  signal s0: std_logic_vector(5 downto 0);
  signal s1: std_logic_vector(1 downto 0);
  signal s2: std_logic_vector(3 downto 0);
  signal s3: std_logic_vector(6 downto 0);
  signal s4: std_logic_vector(1 downto 0);
  signal s5: std_logic_vector(6 downto 0);
  signal s6: std_logic_vector(6 downto 0);
  signal s7: std_logic_vector(1 downto 0);
  signal s8: std_logic_vector(1 downto 0);
begin
  s2(0) <= op_3;
  s2(1) <= op_2;
  s2(2) <= op_1;
  s2(3) <= op_0;
  s0(0) <= b_0;
  s0(1) <= a_0;
  s0(5 downto 2) <= s2;
  gate0: entity work.DIG_ROM_ALU_1 -- ALU_1
    port map (
      A => s0,
      sel => '1',
      D => s1);
  s3(0) <= b_1;
  s3(1) <= a_1;
  s3(5 downto 2) <= s2;
  s3(6) <= s1(0);
  r_0 <= s1(1);
  gate1: entity work.DIG_ROM_ALU_2 -- ALU_2
    port map (
      A => s3,
      sel => '1',
      D => s4);
  s5(0) <= b_2;
  s5(1) <= a_2;
  s5(5 downto 2) <= s2;
  s5(6) <= s4(0);
  r_1 <= s4(1);
  gate2: entity work.DIG_ROM_ALU_3 -- ALU_3
    port map (
      A => s5,
      sel => '1',
      D => s8);
  s6(0) <= b_3;
  s6(1) <= a_3;
  s6(5 downto 2) <= s2;
  s6(6) <= s8(0);
  r_2 <= s8(1);
  gate3: entity work.DIG_ROM_ALU_4 -- ALU_4
    port map (
      A => s6,
      sel => '1',
      D => s7);
  c_out <= s7(0);
  r_3 <= s7(1);
end Behavioral;
